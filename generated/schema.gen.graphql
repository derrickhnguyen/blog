### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CreateCurrentUserPostPayload {
  post: Post
  successful: Boolean!
  userErrors: [UserError!]
}

type CurrentUser implements Node & User {
  email: Email!
  firstName: String!
  id: ID!
  lastName: String!
  posts(input: UserPostsInput = {limit: 10}): UserPosts!
  profile: UserProfile!
}

scalar Date

scalar Email

enum ErrorCodeEnum {
  BadRequest
  Conflict
  Forbidden
  InternalServer
  NotFound
  Unauthorized
}

type GetCurrentUserPayload {
  currentUser: CurrentUser
  successful: Boolean!
  userErrors: [UserError!]
}

input GetCurrentUserPostInput {
  postId: ID!
}

type GetCurrentUserPostPayload {
  post: Post
  successful: Boolean!
  userErrors: [UserError!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createCurrentUserPost: CreateCurrentUserPostPayload!
  updateCurrentUserInformation(input: UpdateCurrentUserInformationInput!): UpdateCurrentUserInformationPayload!
  updateCurrentUserPostContent(input: UpdateCurrentUserPostContentInput!): UpdateCurrentUserPostContentPayload!
}

interface Node {
  id: ID!
}

type Post implements Node {
  author: RegularUser!
  content: JSON
  createdAt: Date!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: Date
}

type Query {
  getCurrentUser: GetCurrentUserPayload!
  getCurrentUserPost(input: GetCurrentUserPostInput!): GetCurrentUserPostPayload!
}

type RegularUser implements Node & User {
  email: Email!
  firstName: String!
  id: ID!
  lastName: String!
  posts(input: UserPostsInput = {limit: 10}): UserPosts!
  profile: UserProfile!
}

input UpdatableCurrentUserInformationInput {
  bio: JSON
  firstName: String
  lastName: String
}

input UpdateCurrentUserInformationInput {
  updatableCurrentUserInformation: UpdatableCurrentUserInformationInput!
}

type UpdateCurrentUserInformationPayload {
  successful: Boolean!
  user: RegularUser
  userErrors: [UserError!]
}

input UpdateCurrentUserPostContentInput {
  postContent: JSON!
  postId: ID!
}

type UpdateCurrentUserPostContentPayload {
  post: Post
  successful: Boolean!
  userErrors: [UserError!]
}

interface User {
  email: Email!
  firstName: String!
  lastName: String!
  posts(input: UserPostsInput = {limit: 10}): UserPosts!
  profile: UserProfile!
}

type UserError {
  code: ErrorCodeEnum!
  message: String!
}

type UserPosts {
  results: [Post!]!
  totalResults: Int!
}

input UserPostsInput {
  after: String
  limit: Int = 10
}

type UserProfile {
  bio: JSON!
}
